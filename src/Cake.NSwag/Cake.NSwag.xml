<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.NSwag</name>
    </assembly>
    <members>
        <member name="T:Cake.NSwag.NSwagAliases">
            <summary>
                Alias to access the code generation functionality from the NSwag toolchain
            </summary>
        </member>
        <member name="M:Cake.NSwag.NSwagAliases.NSwag(Cake.Core.ICakeContext)">
            <summary>
                Gets a runner to invoke NSwag operations
            </summary>
            <param name="ctx">The Cake context</param>
            <example>
                <para> Generate a Swagger spec from a generic .NET assembly</para>
                <code>
            <![CDATA[ NSwag.FromAssembly("./assembly.dll").ToSwaggerSpecification("./typespec.json"); ]]>
            </code>
                <para>Generate a Swagger spec from an ASP.NET Web API assembly</para>
                <code><![CDATA[
            NSwag.FromWebApiAssembly("./web.assembly.dll").ToSwaggerSpecification("./swagger.json");
            ]]></code>
                <para>Generate a Typescript client from a JSON Schema file</para>
                <code><![CDATA[NSwag.FromJsonSchema("./schema.json").ToTypeScriptClient("./client.ts");]]></code>
                <para>Generate a C# client from a Swagger specification</para>
                <code><![CDATA[NSwag.FromSwaggerSpecification("./swagger.json").ToCSharpClient("./client.cs", "Swagger.Client");]]></code>
            </example>
        </member>
        <member name="T:Cake.NSwag.NSwagRunner">
            <summary>
                Exposes API metadata operations for generating specifications and client code.
            </summary>
        </member>
        <member name="M:Cake.NSwag.NSwagRunner.FromAssembly(Cake.Core.IO.FilePath)">
            <summary>
                Parses a plain .NET assembly for metadata
            </summary>
            <param name="assemblyPath">Path to the assembly to load</param>
            <returns>A metadata source for the given assembly</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <c>assemblyPath</c> is null</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the assembly could not be found on the file system</exception>
            <exception cref="T:System.ArgumentException">Thrown when the given path doesn't appear to be an assembly.</exception>
        </member>
        <member name="M:Cake.NSwag.NSwagRunner.FromWebApiAssembly(Cake.Core.IO.FilePath)">
            <summary>
                Parses an ASP.NET Web API assembly for API metadata
            </summary>
            <param name="assemblyPath">Path to the API assembly to load</param>
            <returns>A metadata source for the given assembly</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <c>assemblyPath</c> is null</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the assembly could not be found on the file system</exception>
            <exception cref="T:System.ArgumentException">Thrown when the given path doesn't appear to be an assembly.</exception>
        </member>
        <member name="M:Cake.NSwag.NSwagRunner.FromSwaggerSpecification(Cake.Core.IO.FilePath)">
            <summary>
                Parses a Swagger (Open API) specification for API metadata
            </summary>
            <param name="specificationFilePath">Path to the JSON definition file</param>
            <returns>A metadata source for the given API spec</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the definition file is not provided</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the definition file is not found on the file system</exception>
        </member>
        <member name="M:Cake.NSwag.NSwagRunner.FromJsonSchema(Cake.Core.IO.FilePath)">
            <summary>
                Parses a JSON Schema file for API metadata
            </summary>
            <param name="definitionFilePath">Path to the JSON Schema file</param>
            <returns>A metadata source for the given schema</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>specificationFilePath</c> is null</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the schema file is not found on the file system</exception>
        </member>
        <member name="T:Cake.NSwag.Settings.CSharpGeneratorSettings">
            <summary>
                Settings to further control the C# generation process
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.CSharpGeneratorSettings.Namespaces">
            <summary>
                Gets or sets a collection of additional namespace usages
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.CSharpGeneratorSettings.BaseClass">
            <summary>
                Gets or sets the base class to use for the generated client
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.CSharpGeneratorSettings.GenerateInterfaces">
            <summary>
                Gets or sets a value indicating whether to generate interfaces for the client code.
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.CSharpGeneratorSettings.ClassName">
            <summary>
                Gets or sets a value indicating the class name for the generated client
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.CSharpGeneratorSettings.Namespace">
            <summary>
                Gets or sets a value indicating the namespace for the generated client code
            </summary>
        </member>
        <member name="T:Cake.NSwag.Settings.CSharpGeneratorSettingsExtensions">
            <summary>
                Fluent extension methods for the <see cref="T:Cake.NSwag.Settings.CSharpGeneratorSettings" /> class.
            </summary>
        </member>
        <member name="M:Cake.NSwag.Settings.CSharpGeneratorSettingsExtensions.AddNamespace(Cake.NSwag.Settings.CSharpGeneratorSettings,System.String)">
            <summary>
                Adds an additional namespace usage
            </summary>
            <param name="settings">The settings</param>
            <param name="ns">The namespace to add</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.CSharpGeneratorSettingsExtensions.SetBaseClass(Cake.NSwag.Settings.CSharpGeneratorSettings,System.String)">
            <summary>
                Sets the base class for the generated code
            </summary>
            <param name="settings">The settings</param>
            <param name="baseClassName">A valid C# class name to use as a base class</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.CSharpGeneratorSettingsExtensions.EnableInterfaces(Cake.NSwag.Settings.CSharpGeneratorSettings)">
            <summary>
                Enables generating interfaces when generating the client
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.NSwag.Settings.GeneratorSettings">
            <summary>
            Base class for other generator settings objects to derive from
            </summary>
            <remarks>Provides operation-specific settings</remarks>
        </member>
        <member name="P:Cake.NSwag.Settings.GeneratorSettings.ClientSettings">
            <summary>
            Container for operation-specific settings used when generating client libraries.
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.GeneratorSettings.ControllerSettings">
            <summary>
            Container for operation-specific settings used when generating controller code.
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.GeneratorSettings.JsonSettings">
            <summary>
            Container for operation-specific settings used when generating JSON schemas, including Swagger specifications.
            </summary>
        </member>
        <member name="M:Cake.NSwag.Settings.GeneratorSettings.WithSettings(NSwag.CodeGeneration.CodeGenerators.ClientGeneratorBaseSettings)">
            <summary>
            Specifies operation-specific settings for generating client code.
            </summary>
            <param name="settings">The NSwag settings to use</param>
            <returns>Updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.GeneratorSettings.WithSettings(NJsonSchema.Generation.JsonSchemaGeneratorSettings)">
            <summary>
            Specifies operation-specific settings for generating JSON schemas, including Swagger specifications.
            </summary>
            <param name="settings">The NSwag settings to use</param>
            <returns>Updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.GeneratorSettings.WithSettings(NSwag.CodeGeneration.CodeGenerators.ControllerGeneratorBaseSettings)">
            <summary>
            Specificies operation-specific settings for generating controller code
            </summary>
            <param name="settings">The NSwag settings to use</param>
            <returns>Updated settings object</returns>
        </member>
        <member name="T:Cake.NSwag.Settings.SettingsContainer">
            <summary>
            Container class for NSwag's operation settings objects
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SettingsContainer.SwaggerToCSharpClientGeneratorSettings">
            <summary>
            Specifies operation-specific settings for generating C# from Swagger specifications
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SettingsContainer.SwaggerToCSharpWebApiControllerGeneratorSettings">
            <summary>
            Specificies operation-specific settings for generating Web API controllers from Swagger specifications
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SettingsContainer.SwaggerToTypeScriptClientGeneratorSettings">
            <summary>
            Specifies operation-specific settings for generating TypeScript clients from Swagger specifications
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SettingsContainer.WebApiAssemblyToSwaggerGeneratorSettings">
            <summary>
            Specifies operation-specific settings for generating Swagger specifications from a Web API assembly
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SettingsContainer.AssemblyTypeToSwaggerGeneratorSettings">
            <summary>
            Specifies operation-specific settings for generating Swagger specifications from a .NET assembly.
            </summary>
        </member>
        <member name="T:Cake.NSwag.Settings.SwaggerGeneratorSettings">
            <summary>
                Settings to control the creation of Swagger (Open API) specifications
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.DefaultUrlTemplate">
            <summary>
                Default URL template to be used when parsing routes
            </summary>
            <remarks>Defaults to <c>api/{controller}/{action}/{id}</c></remarks>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.EnumAsString">
            <summary>
                Gets or sets a value indicating whether to represent enums as strings
            </summary>
            <value><c>true</c> to represent as strings or <c>false</c> to represent as integers</value>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.CamelCaseProperties">
            <summary>
                Gets or sets a value indicating whether to represent properties in camel case in generated code.
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.AssemblyPaths">
            <summary>
                Additional assembly paths to search for references when generating metadata
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.ApiTitle">
            <summary>
                Gets or sets the API title for the generated defintion
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.ApiDescription">
            <summary>
                Gets or sets the API description for the generated specification
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.SwaggerGeneratorSettings.BasePath">
            <summary>
                Gets or sets the base path for the API specification
            </summary>
        </member>
        <member name="T:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions">
            <summary>
                Fluent extensions methods for the <see cref="T:Cake.NSwag.Settings.SwaggerGeneratorSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.UseUrlTemplate(Cake.NSwag.Settings.SwaggerGeneratorSettings,System.String)">
            <summary>
                Sets the default URL template to be used when parsing routes
            </summary>
            <param name="settings">The settings</param>
            <param name="template">The url template to use as default</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.UseStringEnums(Cake.NSwag.Settings.SwaggerGeneratorSettings)">
            <summary>
                Enables representing enums as strings in generated specifications
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.UseIntegerEnums(Cake.NSwag.Settings.SwaggerGeneratorSettings)">
            <summary>
                Enables representing enums as integers in generated specifications
            </summary>
            <param name="settings">The settings</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.SearchAssemblies(Cake.NSwag.Settings.SwaggerGeneratorSettings,Cake.Core.IO.FilePath[])">
            <summary>
                Adds the given assemblies to the srach paths to gather additional metadata from.
            </summary>
            <param name="settings">The settings</param>
            <param name="assemblyPaths">Assemblies to search for metadata.</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.WithTitle(Cake.NSwag.Settings.SwaggerGeneratorSettings,System.String)">
            <summary>
                Sets the API title for the generated specification
            </summary>
            <param name="settings">The settings</param>
            <param name="title">API title or name</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.WithDescription(Cake.NSwag.Settings.SwaggerGeneratorSettings,System.String)">
            <summary>
                Sets the API description for use in the generated specification
            </summary>
            <param name="settings">The settings</param>
            <param name="description">Description to include with the generated API spec</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.SwaggerGeneratorSettingsExtensions.UseBasePath(Cake.NSwag.Settings.SwaggerGeneratorSettings,System.String)">
            <summary>
                Sets the base path for use in the Swagger specification
            </summary>
            <param name="settings">The settings</param>
            <param name="basePath">Base path to set in the generated specification</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.NSwag.Settings.TypeScriptGeneratorSettings">
            <summary>
                Settings to further control the generation of TypeScript code
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.TypeScriptGeneratorSettings.ClassName">
            <summary>
                The class name to use for generated client code
            </summary>
        </member>
        <member name="P:Cake.NSwag.Settings.TypeScriptGeneratorSettings.ModuleName">
            <summary>
                The module name to use when generating a module
            </summary>
        </member>
        <member name="T:Cake.NSwag.Settings.TypeScriptGeneratorSettingsExtensions">
            <summary>
                Fluent extension methods for the the <see cref="T:Cake.NSwag.Settings.TypeScriptGeneratorSettings" /> class
            </summary>
        </member>
        <member name="M:Cake.NSwag.Settings.TypeScriptGeneratorSettingsExtensions.WithClassName(Cake.NSwag.Settings.TypeScriptGeneratorSettings,System.String)">
            <summary>
                Sets the class name for the genertated client
            </summary>
            <param name="settings">The settings</param>
            <param name="className">A valid TypeScript class name for the generated client</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="M:Cake.NSwag.Settings.TypeScriptGeneratorSettingsExtensions.WithModuleName(Cake.NSwag.Settings.TypeScriptGeneratorSettings,System.String)">
            <summary>
                Sets the module name for the generated client
            </summary>
            <param name="settings">The settings</param>
            <param name="moduleName">A valid TypeScript module name for the generated module</param>
            <returns>The updated settings object</returns>
        </member>
        <member name="T:Cake.NSwag.Sources.AssemblyMode">
            <summary>
                Specifies how an assembly should be treated when loading types
            </summary>
        </member>
        <member name="F:Cake.NSwag.Sources.AssemblyMode.Normal">
            <summary>
                Assembly should be parsed for "normal" (POCO) objects
            </summary>
        </member>
        <member name="F:Cake.NSwag.Sources.AssemblyMode.WebApi">
            <summary>
                Assembly should be parsed for Web API Controllers
            </summary>
        </member>
        <member name="T:Cake.NSwag.Sources.SwaggerSource">
            <summary>
                Represents a Swagger (Open API) specification to gather metadata from
            </summary>
        </member>
        <member name="M:Cake.NSwag.Sources.SwaggerSource.#ctor(Cake.Core.IO.FilePath,Cake.Core.ICakeEnvironment,Cake.Core.IO.IFileSystem,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.NSwag.Sources.SwaggerSource" /> class.
            </summary>
            <param name="sourceFilePath">Path to the assembly from which to extract metadata</param>
            <param name="environment">The Cake environment</param>
            <param name="fileSystem">The file system</param>
            <param name="log">The log</param>
        </member>
        <member name="M:Cake.NSwag.Sources.SwaggerSource.ToCSharpClient(Cake.Core.IO.FilePath,System.String,System.Action{Cake.NSwag.Settings.CSharpGeneratorSettings})">
            <summary>
                Generates a C# API client at the given path with the specified settings
            </summary>
            <param name="outputFile">File path for the generated client code</param>
            <param name="fullClientPath">The fully qualified class name (including namespace) for the client</param>
            <param name="configure">Optional settings to further control the code generation process</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromSwaggerSpecification("./swagger.json").ToCSharpClient("./client.cs", "Swagger.Client");]]></code>
            </example>
        </member>
        <member name="M:Cake.NSwag.Sources.SwaggerSource.ToTypeScriptClient(Cake.Core.IO.FilePath,System.Action{Cake.NSwag.Settings.TypeScriptGeneratorSettings})">
            <summary>
                Generates a TypeScript API client at the given path with the specified settings
            </summary>
            <param name="outputFile">File path for the generated client code</param>
            <param name="configure">Optional settings to further control the code generation process</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromSwaggerSpecification("./swagger.json").ToTypeScriptClient("./client.ts");]]></code>
            </example>
        </member>
        <member name="M:Cake.NSwag.Sources.SwaggerSource.ToWebApiController(Cake.Core.IO.FilePath,System.String,System.Action{Cake.NSwag.Settings.CSharpGeneratorSettings})">
            <summary>
                Generates a Web API controller class at the given path with the specified settings
            </summary>
            <param name="outputFile">File path for the generated client code</param>
            <param name="classPath">The fully qualified class name (including namespace) for the client</param>
            <param name="configure">Optional settings to further control the code generation process</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[
            NSwag
            .FromSwaggerSpecification("./swagger.json")
            .ToWebApiController("./controller.cs", "Generated.Api.ValuesController")
            ]]></code>
            </example>
        </member>
        <member name="T:Cake.NSwag.Sources.AssemblySource">
            <summary>
                Represents a .NET assembly (conventional or Web API) to gather API metadata from.
            </summary>
        </member>
        <member name="M:Cake.NSwag.Sources.AssemblySource.ToSwaggerSpecification(Cake.Core.IO.FilePath,Cake.NSwag.Settings.SwaggerGeneratorSettings)">
            <summary>
                Generates a Swagger (Open API) specification at the given path using the specified settings
            </summary>
            <param name="outputFile">File path for the generated API specification</param>
            <param name="settings">Settings to further control the spec generation process</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromAssembly("./assembly.dll").ToSwaggerSpecification("./swagger.json");]]></code>
                <code><![CDATA[NSwag.FromWebApiAssembly("./apicontroller.dll").ToSwaggerSpecification("./swagger.json");]]></code>
            </example>
        </member>
        <member name="M:Cake.NSwag.Sources.AssemblySource.ToSwaggerSpecification(Cake.Core.IO.FilePath,System.Action{Cake.NSwag.Settings.SwaggerGeneratorSettings})">
            <summary>
                Generates a Swagger (Open API) specification at the given path using the specified settings
            </summary>
            <param name="outputFile">File path for the generated API specification</param>
            <param name="configure">Optional settings to further control the specification</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromWebApiAssembly("./apicontroller.dll").ToSwaggerSpecification("./api.json");]]></code>
            </example>
        </member>
        <member name="T:Cake.NSwag.Sources.GenerationSource">
            <summary>
                Base class for metadata sources
            </summary>
        </member>
        <member name="M:Cake.NSwag.Sources.GenerationSource.#ctor(Cake.Core.IO.FilePath,Cake.Core.ICakeEnvironment,Cake.Core.IO.IFileSystem)">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.NSwag.Sources.GenerationSource" /> class.
            </summary>
            <param name="sourceFilePath">Source file for the generation process</param>
            <param name="environment">The Cake evironment</param>
            <param name="fileSystem">The file system</param>
        </member>
        <member name="P:Cake.NSwag.Sources.GenerationSource.FileSystem">
            <summary>
                The file system
            </summary>
        </member>
        <member name="P:Cake.NSwag.Sources.GenerationSource.Environment">
            <summary>
                The Cake environment
            </summary>
        </member>
        <member name="P:Cake.NSwag.Sources.GenerationSource.Source">
            <summary>
                Source file for API metadata.
            </summary>
        </member>
        <member name="T:Cake.NSwag.Sources.JsonSchemaSource">
            <summary>
                Represents a JSON Schema to gather metadata from
            </summary>
        </member>
        <member name="M:Cake.NSwag.Sources.JsonSchemaSource.ToTypeScriptClient(Cake.Core.IO.FilePath)">
            <summary>
                Generates a TypeScript client from the JSON Schema metadata
            </summary>
            <param name="outputFile">File path for the generated client code</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromJsonSchema("./schema.json").ToTypeScriptClient("./client.ts");]]></code>
            </example>
        </member>
        <member name="M:Cake.NSwag.Sources.JsonSchemaSource.ToCSharpClient(Cake.Core.IO.FilePath)">
            <summary>
                Genreates a C# client from the JSON Schema metadata
            </summary>
            <param name="outputFile">File path for the generated client code</param>
            <returns>The metadata source</returns>
            <example>
                <code><![CDATA[NSwag.FromJsonSchema("./schema.json").ToCSharpClient("./client.cs");]]></code>
            </example>
        </member>
    </members>
</doc>
